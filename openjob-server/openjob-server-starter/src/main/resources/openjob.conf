akka {
  actor {
    # provider=remote is possible, but prefer cluster
    provider = remote

    cluster-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = PinnedDispatcher
      # What kind of ExecutionService to use
      executor = "thread-pool-executor"
    }

    server-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 6.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 128
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 10
    }
  }
  remote {
    artery {
      transport = tcp # See Selecting a transport below
      canonical.hostname = "127.0.0.1"
      canonical.port = 25521
    }
  }
}